/*
 * CrudSQL API
 * A powerful dynamic CRUD API engine that automatically generates RESTful endpoints for your data models CrudSQL provides automatic CRUD operations, filtering, pagination, and sorting capabilities for any data model. Features: - Automatic REST API generation - Dynamic model support - Complex filtering and querying - Pagination and sorting - Swagger documentation - Multiple database support (SQL & NoSQL)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: taqi@mobix.biz
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ApiErrorResponse;
import org.openapitools.client.model.QueryEntityWithRelations;
import org.openapitools.client.model.QueryFilterResponse;
import org.openapitools.client.model.QueryQueryFilter;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DynamicApi
 */
@Disabled
public class DynamicApiTest {

    private final DynamicApi api = new DynamicApi();

    /**
     * Delete multiple entities
     *
     * Delete multiple entities that match the provided query expression
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modelFilterDeleteTest() throws ApiException {
        String model = null;
        QueryQueryFilter filter = null;
        Map<String, Object> response = api.modelFilterDelete(model, filter);
        // TODO: test validations
    }

    /**
     * Filter entities
     *
     * Filter entities using complex conditions including field expressions, logical operations, and relationship filtering
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modelFilterPostTest() throws ApiException {
        String model = null;
        QueryQueryFilter filter = null;
        Integer page = null;
        Integer pageSize = null;
        String sort = null;
        QueryFilterResponse response = api.modelFilterPost(model, filter, page, pageSize, sort);
        // TODO: test validations
    }

    /**
     * Update multiple entities
     *
     * Update multiple entities that match the provided query expression
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modelFilterPutTest() throws ApiException {
        String model = null;
        QueryEntityWithRelations entity = null;
        Map<String, Object> response = api.modelFilterPut(model, entity);
        // TODO: test validations
    }

    /**
     * List and filter entities
     *
     * Get a list of entities. Use query parameters for simple filtering or POST to /filter for complex conditions
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modelGetTest() throws ApiException {
        String model = null;
        Integer page = null;
        Integer pageSize = null;
        String sort = null;
        QueryFilterResponse response = api.modelGet(model, page, pageSize, sort);
        // TODO: test validations
    }

    /**
     * Delete an entity
     *
     * Delete an entity by its ID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modelIdDeleteTest() throws ApiException {
        String model = null;
        String id = null;
        ApiErrorResponse response = api.modelIdDelete(model, id);
        // TODO: test validations
    }

    /**
     * Get an entity by ID
     *
     * Retrieve a single entity by its ID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modelIdGetTest() throws ApiException {
        String model = null;
        String id = null;
        QueryFilterResponse response = api.modelIdGet(model, id);
        // TODO: test validations
    }

    /**
     * Update an entity
     *
     * Update an existing entity by its ID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modelIdPutTest() throws ApiException {
        String model = null;
        String id = null;
        QueryEntityWithRelations entity = null;
        QueryFilterResponse response = api.modelIdPut(model, id, entity);
        // TODO: test validations
    }

    /**
     * Create a new entity
     *
     * Create a new entity of the specified model type
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modelPostTest() throws ApiException {
        String model = null;
        QueryEntityWithRelations entity = null;
        QueryFilterResponse response = api.modelPost(model, entity);
        // TODO: test validations
    }

}
